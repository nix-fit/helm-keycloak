---

image:
  # -- image registry
  registry: nix-docker.registry.twcstorage.ru
  # -- image repository
  repository: keycloak/keycloak
  # -- image tag
  tag: 26.3.4
  # -- image digest
  digest: sha256:5838c6e0bd64e8d0f2285bcb12ad65a460d1512a94faf044c6b0a875accc619a
  # -- image pull policy
  pullPolicy: Always

serviceAccount:
  # -- service account name
  name: keycloak
  # -- service account auto mount token
  automountServiceAccountToken: false

# -- replica count
replicaCount: 2

updateStrategy:
  # -- update strategy type
  type: RollingUpdate

service:
  # -- service name
  name: keycloak
  # -- headless service name
  headlessName: keycloak-headless
  # -- service port (app)
  port: 8080
  # -- management port (health, metrics)
  managementPort: 9000

ingress:
  # -- open access to keycloak outside cluster
  enabled: false
  # -- ingress class name
  className: nginx
  # -- ingress host
  host: ""
  # -- ingress tls secret name
  tlsSecretName: ""
  # -- ingress custom path
  adminPath: ""
  annotations:
    # -- cert manager cluster issuer for signing ssl certificates
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # -- ingress redirect from http to https
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # -- ingress add strict transport secirity header to response
    nginx.ingress.kubernetes.io/hsts: "true"
    # -- ingress strict transport secirity header max age
    nginx.ingress.kubernetes.io/hsts-max-age: "31536000"

admin:
  # -- secret name with admin user credentials
  secretName: keycloak-admin-credentials

db:
  # -- secret name with database user credentials
  secretName: keycloak-db-credentials
  ssl:
    # -- enable mounting ca certificate for tls database connection
    enabled: true
    # -- secret name containing ca certificate
    caSecretName: keycloak-db-ssl-ca
    # -- key in the secret for ca certificate
    caSecretKey: ca.crt
    # -- secret mount path
    caSecretMountPath: /etc/ssl/db/ca.crt

resources:
  requests:
    # -- cpu requests
    cpu: 250m
    # -- memory requests
    memory: 512Mi
  limits:
    # -- cpu limits
    cpu: 1000m
    # memory limits
    memory: 1Gi

# -- pod security context overrides
podSecurityContext: {}

# -- container security context overrides
containerSecurityContext: {}

probes:
  liveness:
    # -- liveness probe path
    path: /health/live
    # -- liveness probe initial delay
    initialDelaySeconds: 60
    # -- liveness probe period
    periodSeconds: 5
    # -- liveness probe timeout per attempt
    timeoutSeconds: 1
    # -- liveness probe max consecutive failures before restart
    failureThreshold: 5
  readiness:
    # -- readiness probe path
    path: /health/ready
    # -- readiness probe inital delay
    initialDelaySeconds: 60
    # -- readiness probe period
    periodSeconds: 5
    # -- readiness probe timeout per attempt
    timeoutSeconds: 1
    # -- readiness probe max consecutive failures before unready
    failureThreshold: 5

env:
  # -- keycloak proxy headers to accept
  kcProxyHeaders: xforwarded
  # -- keycloak enable http
  kcHttpEnabled: "true"
  # -- keycloak strict hostname
  kcHostnameStrict: "true"
  # -- keycloak enable health endpoints
  kcHealthEnabled: "true"
  # -- keycloak cache mechanism (only ispn for production)
  kcCache: ispn
  # -- keycloak enable metrics endpoint
  kcMetricsEnabled: "true"
  # -- keycloak database driver type
  kcDb: postgres
